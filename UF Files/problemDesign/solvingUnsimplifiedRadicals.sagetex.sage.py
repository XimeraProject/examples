## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file solvingUnsimplifiedRadicals.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_32 = Integer(32); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100); _sage_const_200 = Integer(200); _sage_const_50 = Integer(50); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10); _sage_const_4 = Integer(4); _sage_const_106 = Integer(106); _sage_const_114 = Integer(114); _sage_const_116 = Integer(116)## This file (solvingUnsimplifiedRadicals.sagetex.sage) was *autogenerated* from solvingUnsimplifiedRadicals.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('solvingUnsimplifiedRadicals', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = _sage_const_32 
_st_.blockbegin()
try:
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 
 
 
 
 p1ans1 = _sage_const_100 
 p1ans2 = _sage_const_200 
 
 while p1ans1>_sage_const_50  or p1ans2>_sage_const_50 :
     # Make p(x)
     p1c1 = NonZeroInt(_sage_const_1 ,_sage_const_5 )# a
     p1c2 = RandInt(_sage_const_1 ,_sage_const_5 )# b
     p1c3 = RandInt(_sage_const_1 ,_sage_const_5 )# c
 
     p1px = p1c1*(x-p1c2)**_sage_const_2  + p1c3
 
     p1w = RandInt(_sage_const_1 ,_sage_const_3 )
 
     p1h = p1px(x=(p1c2+p1w))
 
     p1wprime = RandInt(_sage_const_2 ,_sage_const_5 )
 
     p1bprime = RandInt(p1c2+_sage_const_1 , _sage_const_10 )
     p1aprime = NonZeroInt(_sage_const_1 ,_sage_const_5 ,[p1c1])
     p1cprime = p1h - p1aprime*p1wprime**_sage_const_2 
 
     p1gap = p1bprime + p1wprime -p1c2 - p1w#RandInt(p1bprime - p1c2 - p1w + 1, 2*(p1bprime - p1c2 - p1w + 1))
 
 
     p1left = sqrt((x - p1c3)/p1c1) + p1c2 + p1gap
     p1right = sqrt((x - p1cprime)/p1aprime) + p1bprime
 
 
     p1d = p1c2+p1gap-p1bprime
     p1e = p1c3*p1aprime-p1cprime*p1c1-p1d**_sage_const_2 *p1c1*p1aprime
 
     p1A = (p1c1-p1aprime)**_sage_const_2 
     p1B = _sage_const_2 *(p1c1-p1aprime)*p1e - _sage_const_4 *p1d**_sage_const_2 *p1aprime**_sage_const_2 *p1c1
     p1C = p1e**_sage_const_2  + _sage_const_4 *p1d**_sage_const_2 *p1aprime**_sage_const_2 *p1c1*p1c3
 
     p1ans1 = (-p1B + sqrt(p1B**_sage_const_2  - _sage_const_4 *p1A*p1C))/(_sage_const_2 *p1A)
     p1ans2 = (-p1B - sqrt(p1B**_sage_const_2  - _sage_const_4 *p1A*p1C))/(_sage_const_2 *p1A)
 
     if p1left(x=p1ans1) == p1right(x=p1ans1):
         if p1left(x=p1ans2)==p1right(x=p1ans2):
             p1ans = p1ans1+p1ans2
         else:
             p1ans=p1ans1
     else:
         p1ans=p1ans2
 
     if p1ans1==p1ans2:
         if p1left(x=p1ans1)==p1right(x=p1ans1):
             p1ans=p1ans1
         else:
             p1ans=LatexExpr(r"DNE")
 
 
except:
 _st_.goboom(_sage_const_106 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_114 
 _st_.inline(_sage_const_0 , latex(p1left))
except:
 _st_.goboom(_sage_const_114 )
try:
 _st_.current_tex_line = _sage_const_114 
 _st_.inline(_sage_const_1 , latex(p1right))
except:
 _st_.goboom(_sage_const_114 )
try:
 _st_.current_tex_line = _sage_const_116 
 _st_.inline(_sage_const_2 , latex(p1ans))
except:
 _st_.goboom(_sage_const_116 )
_st_.endofdoc()

