## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file polyWithTwoFactorableDerivatives.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_15 = Integer(15); _sage_const_0 = Integer(0); _sage_const_9999 = Integer(9999); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_92 = Integer(92); _sage_const_102 = Integer(102); _sage_const_104 = Integer(104); _sage_const_106 = Integer(106); _sage_const_108 = Integer(108); _sage_const_4 = Integer(4); _sage_const_110 = Integer(110)## This file (polyWithTwoFactorableDerivatives.sagetex.sage) was *autogenerated* from polyWithTwoFactorableDerivatives.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('polyWithTwoFactorableDerivatives', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = _sage_const_15 
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 
 
 ## Start with a while loop to make sure the result has reasonable coefficients, at least in general size.
 p1f2 = _sage_const_9999 *x**_sage_const_3  + _sage_const_9999 *x**_sage_const_2  + _sage_const_9999 *x + _sage_const_9999 
 
 while ((abs(p1f2.coefficient(x**_sage_const_3 ))>_sage_const_100 ) or (abs(p1f2.coefficient(x**_sage_const_2 ))>_sage_const_100 ) or (abs(p1f2.coefficient(x))>_sage_const_100 ) or (abs(p1f2(x=_sage_const_0 ))>_sage_const_100 )):
     ### We start by taking a product of factors to get a factorable first derivative.
 
     # Make sure the leading coefficient is divisible by 3, which will help ensure the numbers stay nice(ish) after integrating.
     p1c1 = _sage_const_1 
     p1c3 = _sage_const_1 
     while mod(p1c1*p1c3,_sage_const_3 )>_sage_const_0 :
         p1c1 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
         p1c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
         p1c3 = RandInt(_sage_const_1 ,_sage_const_6 )
         p1c4 = -sign(p1c1)*sign(p1c2)*RandInt(_sage_const_1 ,_sage_const_5 )# Rigged sign to make sure we get a difference of squares in the cube, not sum.
 
 
     p1fact1 = p1c1*x-p1c2
     p1fact2 = p1c3*x-p1c4
 
     p1f1 = expand(p1fact1*p1fact2)
 
 
 
     ### Now we make the original function by integrating, then finding an appropriate ‘‘C’’ to add to make it factor by grouping in some nice way.
 
     p1f2temp = integral(p1f1,x)
 
     # Now, we assume we are going to factor by grouping, to be kind, so we extract the necessary constant we will need:
     p1c5 = p1f2temp.coefficient(x**_sage_const_2 )*p1f2temp.coefficient(x)/p1f2temp.coefficient(x**_sage_const_3 )
 
     p1f2 = p1f2temp+p1c5
 
     if p1f2.coefficient(x**_sage_const_3 )*p1f2.coefficient(x)<_sage_const_0 :
         p1sqrtval = p1f2.coefficient(x)/p1f2.coefficient(x**_sage_const_3 )
         p1f2fact1a = x - sqrt(abs(p1sqrtval))
         p1f2fact1b = x + sqrt(abs(p1sqrtval))
         p1f2fact1 = -sign(p1sqrtval)*(p1f2fact1a)*(p1f2fact1b)#(-sqrt(-p1f2.coefficient(x^3))*x + sqrt(p1f2.coefficient(x)))*(sqrt(-p1f2.coefficient(x^3))*x + sqrt(p1f2.coefficient(x)) )
         p1f2fact2 = p1f2.coefficient(x**_sage_const_3 )*x + p1f2.coefficient(x**_sage_const_2 )
         p1f1zero1 = -p1f2fact1a(x=_sage_const_0 )/p1f2fact1a.coefficient(x)
         p1f1zero2 = -p1f2fact1b(x=_sage_const_0 )/p1f2fact1b.coefficient(x)
         p1f1zero3 = -p1f2fact2(x=_sage_const_0 )/p1f2fact2.coefficient(x)
     else:
         p1f2fact1 = p1f2.coefficient(x**_sage_const_3 )*x**_sage_const_2  + p1f2.coefficient(x)
         p1f2fact2 = x + p1f2.coefficient(x**_sage_const_2 )/p1f2.coefficient(x**_sage_const_3 )
         p1f1zero1 = _sage_const_0 
         p1f1zero2 = _sage_const_0 
         p1f1zero3 = -p1f2fact2(x=_sage_const_0 )/p1f2fact2.coefficient(x)
 
     p1f2check = expand(p1f2fact1*p1f2fact2)
 
 
 
 
     ### To get the second derivative function we can take the derivative of the original - which must be linear and so we know it is easy to solve for students.
 
     p1f3 = derivative(p1f1,x)
 
 
 
except:
 _st_.goboom(_sage_const_92 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_102 
 _st_.inline(_sage_const_0 , latex(p1f2))
except:
 _st_.goboom(_sage_const_102 )
try:
 _st_.current_tex_line = _sage_const_104 
 _st_.inline(_sage_const_1 , latex(p1f2fact1))
except:
 _st_.goboom(_sage_const_104 )
try:
 _st_.current_tex_line = _sage_const_104 
 _st_.inline(_sage_const_2 , latex(p1f2fact2))
except:
 _st_.goboom(_sage_const_104 )
try:
 _st_.current_tex_line = _sage_const_106 
 _st_.inline(_sage_const_3 , latex(p1f1))
except:
 _st_.goboom(_sage_const_106 )
try:
 _st_.current_tex_line = _sage_const_108 
 _st_.inline(_sage_const_4 , latex(p1fact1))
except:
 _st_.goboom(_sage_const_108 )
try:
 _st_.current_tex_line = _sage_const_108 
 _st_.inline(_sage_const_5 , latex(p1fact2))
except:
 _st_.goboom(_sage_const_108 )
try:
 _st_.current_tex_line = _sage_const_110 
 _st_.inline(_sage_const_6 , latex(p1f3))
except:
 _st_.goboom(_sage_const_110 )
_st_.endofdoc()

