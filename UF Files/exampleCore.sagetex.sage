## -*- encoding: utf-8 -*-
## This file (exampleCore.sagetex.sage) was *autogenerated* from exampleCore.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('exampleCore', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = 70
_st_.blockbegin()
try:
             p1c1 = 3
             p1f1 = 2*x + 4
 
             p1ans = p1f1(x=p1c1)
         
except:
 _st_.goboom(75)
_st_.blockend()
try:
 _st_.current_tex_line = 77
 _st_.inline(0, latex(p1f1))
except:
 _st_.goboom(77)
try:
 _st_.current_tex_line = 77
 _st_.inline(1, latex(p1c1))
except:
 _st_.goboom(77)
try:
 _st_.current_tex_line = 77
 _st_.inline(2, latex(p1ans))
except:
 _st_.goboom(77)
_st_.current_tex_line = 35
_st_.blockbegin()
try:
 p2f1 = 3*x+1
 p2ans = p2f1(x=4)
except:
 _st_.goboom(38)
_st_.blockend()
try:
 _st_.current_tex_line = 40
 _st_.inline(3, latex(p2f1))
except:
 _st_.goboom(40)
try:
 _st_.current_tex_line = 40
 _st_.inline(4, latex(p2ans))
except:
 _st_.goboom(40)
_st_.current_tex_line = 127
_st_.blockbegin()
try:
 p4str = 'this is a string'
 p4ans = 'yes'
except:
 _st_.goboom(130)
_st_.blockend()
try:
 _st_.current_tex_line = 134
 _st_.inline(5, latex(p4str))
except:
 _st_.goboom(134)
try:
 _st_.current_tex_line = 137
 _st_.inline(6, latex(p4ans))
except:
 _st_.goboom(137)
_st_.current_tex_line = 161
_st_.blockbegin()
try:
 p5str = LatexExpr(r'\text{this is a string}')
 p5ans = LatexExpr(r'yes')
except:
 _st_.goboom(164)
_st_.blockend()
try:
 _st_.current_tex_line = 168
 _st_.inline(7, latex(p5str))
except:
 _st_.goboom(168)
try:
 _st_.current_tex_line = 171
 _st_.inline(8, latex(p5ans))
except:
 _st_.goboom(171)
_st_.current_tex_line = 67
_st_.blockbegin()
try:
 #####Define default Sage variables.
 #Default function variables
 var('x,y,z,X,Y,Z,r,R')
 #Default function names
 var('f,g,h,dx,dy,dz,dh,df')
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 p1c1 = NonZeroInt(-10,10)
 p1c2 = RandInt(-5,5)
 p1c3 = RandInt(-5,5)
 p1f1 = expand( (p1c1*x-p1c2)*(x-p1c3) )
     
except:
 _st_.goboom(93)
_st_.blockend()
try:
 _st_.current_tex_line = 97
 _st_.inline(9, latex(p1f1))
except:
 _st_.goboom(97)
_st_.current_tex_line = 23
_st_.blockbegin()
try:
 #####Define default Sage variables.
 #Default function variables
 var('x,y,z,X,Y,Z,r,R')
 #Default function names
 var('f,g,h,dx,dy,dz,dh,df')
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 #### Problem p1
 p1ans = (x-RandInt(-5,5))*(x-RandInt(-5,5))
 p1disp = expand(p1ans)
 
 #### Problem p2
 p2ans = (NonZeroInt(-5,5)*x-RandInt(-5,5))*(NonZeroInt(-5,5)*x-RandInt(-5,5))
 p2disp = expand(p2ans)
 
 #### Problem p3
 p3c1 = NonZeroInt(-5,5)
 p3c2 = NonZeroInt(-5,5)
 p3c3 = NonZeroInt(-5,5)
 p3ans = (p3c1*x-p3c2)*(x-p3c3)*(x+p3c3)
 p3disp = expand(p3ans)
 
 p1prompt = LatexExpr(r'\text{Factor the following polynomial. } \\ \text{Note that its leading coefficient is one, so you should use the coefficient method. }')
 
 p2prompt = LatexExpr(r'\text{Factor the following polynomial with the AC-method. }')
 p3prompt = LatexExpr(r'\text{Factor the following polynomial via grouping. }\\ \text{Remember you must factor it completely. }')
 
 problemVec = [[p1prompt,p1disp,p1ans],[p2prompt,p2disp,p2ans],[p3prompt,p3disp,p3ans]]
 shuffle(problemVec)
 
     
except:
 _st_.goboom(68)
_st_.blockend()
try:
 _st_.current_tex_line = 71
 _st_.inline(10, latex(problemVec[0][0]))
except:
 _st_.goboom(71)
try:
 _st_.current_tex_line = 73
 _st_.inline(11, latex(problemVec[0][1]))
except:
 _st_.goboom(73)
try:
 _st_.current_tex_line = 73
 _st_.inline(12, latex(problemVec[0][2]))
except:
 _st_.goboom(73)
try:
 _st_.current_tex_line = 77
 _st_.inline(13, latex(problemVec[1][0]))
except:
 _st_.goboom(77)
try:
 _st_.current_tex_line = 79
 _st_.inline(14, latex(problemVec[1][1]))
except:
 _st_.goboom(79)
try:
 _st_.current_tex_line = 79
 _st_.inline(15, latex(problemVec[1][2]))
except:
 _st_.goboom(79)
try:
 _st_.current_tex_line = 83
 _st_.inline(16, latex(problemVec[2][0]))
except:
 _st_.goboom(83)
try:
 _st_.current_tex_line = 85
 _st_.inline(17, latex(problemVec[2][1]))
except:
 _st_.goboom(85)
try:
 _st_.current_tex_line = 85
 _st_.inline(18, latex(problemVec[2][2]))
except:
 _st_.goboom(85)
_st_.current_tex_line = 41
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 p1temp1 = 'temp'
 
 p1temp2 = x^2 + NonZeroInt(-2,2)
 plot(p1temp2,(x,-3,3))
except:
 _st_.goboom(61)
_st_.blockend()
try:
 _st_.current_tex_line = 66
 _st_.inline(19, latex(p1temp2))
except:
 _st_.goboom(66)
try:
 _st_.current_tex_line = 68
 _st_.plot(0, format='notprovided', _p_=plot(p1temp2, -1, 1))
except:
 _st_.goboom(68)
try:
 _st_.current_tex_line = 71
 _st_.inline(20, p1temp1)
except:
 _st_.goboom(71)
try:
 _st_.current_tex_line = 74
 _st_.inline(21, p1temp1)
except:
 _st_.goboom(74)
_st_.current_tex_line = 426
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 p1c1 = NonZeroInt(-5,5)
 p1c2 = RandInt(-5,5)
 p1c3 = NonZeroInt(-5,5)
 p1c4 = RandInt(-5,5)
 p1c5 = NonZeroInt(-5,5)
 p1c6 = RandInt(-5,5)
 p1c7 = NonZeroInt(-5,5)
 p1c8 = RandInt(-5,5)
 p1c9 = NonZeroInt(-5,5)
 p1c10 = RandInt(-5,5)
 p1c11 = NonZeroInt(-5,5)
 p1c12 = RandInt(-5,5)
 p1c13 = NonZeroInt(-5,5)
 p1c14 = RandInt(-5,5)
 
 p1f1 = p1c1*x-p1c2
 p1f2 = p1c3*x-p1c4
 p1f3 = p1c5*x-p1c6
 p1f4 = p1c7*x-p1c8
 p1f5 = p1c9*x-p1c10
 p1f6 = p1c11*x-p1c12
 p1f7 = p1c13*x-p1c14
 
 p1fdisp = x^3*p1f1*p1f2*p1f3*p1f4*p1f5*p1f6*p1f7
 
except:
 _st_.goboom(467)
_st_.blockend()
try:
 _st_.current_tex_line = 471
 _st_.inline(22, latex(p1fdisp))
except:
 _st_.goboom(471)
try:
 _st_.current_tex_line = 473
 _st_.inline(23, latex(p1fdisp))
except:
 _st_.goboom(473)
_st_.current_tex_line = 23
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 p1c1 = RandInt(-10,10)
 p1c2 = NonZeroInt(-10,10,[p1c1])
 p1c3 = NonZeroInt(-10,10,[p1c1,p1c2])
 p1c4 = NonZeroInt(-10,10,[p1c1,p1c2,p1c3])
 p1c5 = NonZeroInt(-10,10,[p1c1,p1c2,p1c3,p1c4])
 
 p1ansvec = [p1c1,p1c2,p1c3,p1c4,p1c5]
 shuffle(p1ansvec)
 
 p1ans1 = p1ansvec.index(p1c1) + 1
 
 p1ans2 = 2^5-1-2^(p1ansvec.index(p1c1))
 
 p1ansvecalpha=[LatexExpr(r"a"),LatexExpr(r"b"),LatexExpr(r"c"),LatexExpr(r"d"),LatexExpr(r"e")]
 
 p1ans3 = p1ansvecalpha[p1ansvec.index(p1c2)]+p1ansvecalpha[p1ansvec.index(p1c3)]
 
except:
 _st_.goboom(56)
_st_.blockend()
try:
 _st_.current_tex_line = 60
 _st_.inline(24, latex(p1c1))
except:
 _st_.goboom(60)
try:
 _st_.current_tex_line = 63
 _st_.inline(25, latex(p1ansvec[0]))
except:
 _st_.goboom(63)
try:
 _st_.current_tex_line = 64
 _st_.inline(26, latex(p1ansvec[1]))
except:
 _st_.goboom(64)
try:
 _st_.current_tex_line = 65
 _st_.inline(27, latex(p1ansvec[2]))
except:
 _st_.goboom(65)
try:
 _st_.current_tex_line = 66
 _st_.inline(28, latex(p1ansvec[3]))
except:
 _st_.goboom(66)
try:
 _st_.current_tex_line = 67
 _st_.inline(29, latex(p1ansvec[4]))
except:
 _st_.goboom(67)
try:
 _st_.current_tex_line = 69
 _st_.inline(30, latex(p1ans1))
except:
 _st_.goboom(69)
try:
 _st_.current_tex_line = 84
 _st_.inline(31, latex(p1c1))
except:
 _st_.goboom(84)
try:
 _st_.current_tex_line = 87
 _st_.inline(32, latex(p1ansvec[0]))
except:
 _st_.goboom(87)
try:
 _st_.current_tex_line = 88
 _st_.inline(33, latex(p1ansvec[1]))
except:
 _st_.goboom(88)
try:
 _st_.current_tex_line = 89
 _st_.inline(34, latex(p1ansvec[2]))
except:
 _st_.goboom(89)
try:
 _st_.current_tex_line = 90
 _st_.inline(35, latex(p1ansvec[3]))
except:
 _st_.goboom(90)
try:
 _st_.current_tex_line = 91
 _st_.inline(36, latex(p1ansvec[4]))
except:
 _st_.goboom(91)
try:
 _st_.current_tex_line = 94
 _st_.inline(37, latex(p1ans2))
except:
 _st_.goboom(94)
try:
 _st_.current_tex_line = 104
 _st_.inline(38, latex(p1c2))
except:
 _st_.goboom(104)
try:
 _st_.current_tex_line = 104
 _st_.inline(39, latex(p1c3))
except:
 _st_.goboom(104)
try:
 _st_.current_tex_line = 107
 _st_.inline(40, latex(p1ansvec[0]))
except:
 _st_.goboom(107)
try:
 _st_.current_tex_line = 108
 _st_.inline(41, latex(p1ansvec[1]))
except:
 _st_.goboom(108)
try:
 _st_.current_tex_line = 109
 _st_.inline(42, latex(p1ansvec[2]))
except:
 _st_.goboom(109)
try:
 _st_.current_tex_line = 110
 _st_.inline(43, latex(p1ansvec[3]))
except:
 _st_.goboom(110)
try:
 _st_.current_tex_line = 111
 _st_.inline(44, latex(p1ansvec[4]))
except:
 _st_.goboom(111)
try:
 _st_.current_tex_line = 114
 _st_.inline(45, latex(p1ans3))
except:
 _st_.goboom(114)
_st_.current_tex_line = 32
_st_.blockbegin()
try:
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 
 
 
 
 p1ans1 = 100
 p1ans2 = 200
 
 while p1ans1>50 or p1ans2>50:
     # Make p(x)
     p1c1 = NonZeroInt(1,5)# a
     p1c2 = RandInt(1,5)# b
     p1c3 = RandInt(1,5)# c
 
     p1px = p1c1*(x-p1c2)^2 + p1c3
 
     p1w = RandInt(1,3)
 
     p1h = p1px(x=(p1c2+p1w))
 
     p1wprime = RandInt(2,5)
 
     p1bprime = RandInt(p1c2+1, 10)
     p1aprime = NonZeroInt(1,5,[p1c1])
     p1cprime = p1h - p1aprime*p1wprime^2
 
     p1gap = p1bprime + p1wprime -p1c2 - p1w#RandInt(p1bprime - p1c2 - p1w + 1, 2*(p1bprime - p1c2 - p1w + 1))
 
 
     p1left = sqrt((x - p1c3)/p1c1) + p1c2 + p1gap
     p1right = sqrt((x - p1cprime)/p1aprime) + p1bprime
 
 
     p1d = p1c2+p1gap-p1bprime
     p1e = p1c3*p1aprime-p1cprime*p1c1-p1d^2*p1c1*p1aprime
 
     p1A = (p1c1-p1aprime)^2
     p1B = 2*(p1c1-p1aprime)*p1e - 4*p1d^2*p1aprime^2*p1c1
     p1C = p1e^2 + 4*p1d^2*p1aprime^2*p1c1*p1c3
 
     p1ans1 = (-p1B + sqrt(p1B^2 - 4*p1A*p1C))/(2*p1A)
     p1ans2 = (-p1B - sqrt(p1B^2 - 4*p1A*p1C))/(2*p1A)
 
     if p1left(x=p1ans1) == p1right(x=p1ans1):
         if p1left(x=p1ans2)==p1right(x=p1ans2):
             p1ans = p1ans1+p1ans2
         else:
             p1ans=p1ans1
     else:
         p1ans=p1ans2
 
     if p1ans1==p1ans2:
         if p1left(x=p1ans1)==p1right(x=p1ans1):
             p1ans=p1ans1
         else:
             p1ans=LatexExpr(r"DNE")
 
 
except:
 _st_.goboom(106)
_st_.blockend()
try:
 _st_.current_tex_line = 114
 _st_.inline(46, latex(p1left))
except:
 _st_.goboom(114)
try:
 _st_.current_tex_line = 114
 _st_.inline(47, latex(p1right))
except:
 _st_.goboom(114)
try:
 _st_.current_tex_line = 116
 _st_.inline(48, latex(p1ans))
except:
 _st_.goboom(116)
_st_.current_tex_line = 15
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 
 
 ## Start with a while loop to make sure the result has reasonable coefficients, at least in general size.
 p1f2 = 9999*x^3 + 9999*x^2 + 9999*x + 9999
 
 while ((abs(p1f2.coefficient(x^3))>100) or (abs(p1f2.coefficient(x^2))>100) or (abs(p1f2.coefficient(x))>100) or (abs(p1f2(x=0))>100)):
     ### We start by taking a product of factors to get a factorable first derivative.
 
     # Make sure the leading coefficient is divisible by 3, which will help ensure the numbers stay nice(ish) after integrating.
     p1c1 = 1
     p1c3 = 1
     while mod(p1c1*p1c3,3)>0:
         p1c1 = NonZeroInt(-5,5)
         p1c2 = NonZeroInt(-5,5)
         p1c3 = RandInt(1,6)
         p1c4 = -sign(p1c1)*sign(p1c2)*RandInt(1,5)# Rigged sign to make sure we get a difference of squares in the cube, not sum.
 
 
     p1fact1 = p1c1*x-p1c2
     p1fact2 = p1c3*x-p1c4
 
     p1f1 = expand(p1fact1*p1fact2)
 
 
 
     ### Now we make the original function by integrating, then finding an appropriate ‘‘C’’ to add to make it factor by grouping in some nice way.
 
     p1f2temp = integral(p1f1,x)
 
     # Now, we assume we are going to factor by grouping, to be kind, so we extract the necessary constant we will need:
     p1c5 = p1f2temp.coefficient(x^2)*p1f2temp.coefficient(x)/p1f2temp.coefficient(x^3)
 
     p1f2 = p1f2temp+p1c5
 
     if p1f2.coefficient(x^3)*p1f2.coefficient(x)<0:
         p1sqrtval = p1f2.coefficient(x)/p1f2.coefficient(x^3)
         p1f2fact1a = x - sqrt(abs(p1sqrtval))
         p1f2fact1b = x + sqrt(abs(p1sqrtval))
         p1f2fact1 = -sign(p1sqrtval)*(p1f2fact1a)*(p1f2fact1b)#(-sqrt(-p1f2.coefficient(x^3))*x + sqrt(p1f2.coefficient(x)))*(sqrt(-p1f2.coefficient(x^3))*x + sqrt(p1f2.coefficient(x)) )
         p1f2fact2 = p1f2.coefficient(x^3)*x + p1f2.coefficient(x^2)
         p1f1zero1 = -p1f2fact1a(x=0)/p1f2fact1a.coefficient(x)
         p1f1zero2 = -p1f2fact1b(x=0)/p1f2fact1b.coefficient(x)
         p1f1zero3 = -p1f2fact2(x=0)/p1f2fact2.coefficient(x)
     else:
         p1f2fact1 = p1f2.coefficient(x^3)*x^2 + p1f2.coefficient(x)
         p1f2fact2 = x + p1f2.coefficient(x^2)/p1f2.coefficient(x^3)
         p1f1zero1 = 0
         p1f1zero2 = 0
         p1f1zero3 = -p1f2fact2(x=0)/p1f2fact2.coefficient(x)
 
     p1f2check = expand(p1f2fact1*p1f2fact2)
 
 
 
 
     ### To get the second derivative function we can take the derivative of the original - which must be linear and so we know it is easy to solve for students.
 
     p1f3 = derivative(p1f1,x)
 
 
 
except:
 _st_.goboom(92)
_st_.blockend()
try:
 _st_.current_tex_line = 102
 _st_.inline(49, latex(p1f2))
except:
 _st_.goboom(102)
try:
 _st_.current_tex_line = 104
 _st_.inline(50, latex(p1f2fact1))
except:
 _st_.goboom(104)
try:
 _st_.current_tex_line = 104
 _st_.inline(51, latex(p1f2fact2))
except:
 _st_.goboom(104)
try:
 _st_.current_tex_line = 106
 _st_.inline(52, latex(p1f1))
except:
 _st_.goboom(106)
try:
 _st_.current_tex_line = 108
 _st_.inline(53, latex(p1fact1))
except:
 _st_.goboom(108)
try:
 _st_.current_tex_line = 108
 _st_.inline(54, latex(p1fact2))
except:
 _st_.goboom(108)
try:
 _st_.current_tex_line = 110
 _st_.inline(55, latex(p1f3))
except:
 _st_.goboom(110)
_st_.endofdoc()
