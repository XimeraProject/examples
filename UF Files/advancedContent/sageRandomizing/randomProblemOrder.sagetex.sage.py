## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file randomProblemOrder.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_23 = Integer(23); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_68 = Integer(68); _sage_const_71 = Integer(71); _sage_const_73 = Integer(73); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_77 = Integer(77); _sage_const_3 = Integer(3); _sage_const_79 = Integer(79); _sage_const_4 = Integer(4); _sage_const_83 = Integer(83); _sage_const_6 = Integer(6); _sage_const_85 = Integer(85); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8)## This file (randomProblemOrder.sagetex.sage) was *autogenerated* from randomProblemOrder.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('randomProblemOrder', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = _sage_const_23 
_st_.blockbegin()
try:
 #####Define default Sage variables.
 #Default function variables
 var('x,y,z,X,Y,Z,r,R')
 #Default function names
 var('f,g,h,dx,dy,dz,dh,df')
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 #### Problem p1
 p1ans = (x-RandInt(-_sage_const_5 ,_sage_const_5 ))*(x-RandInt(-_sage_const_5 ,_sage_const_5 ))
 p1disp = expand(p1ans)
 
 #### Problem p2
 p2ans = (NonZeroInt(-_sage_const_5 ,_sage_const_5 )*x-RandInt(-_sage_const_5 ,_sage_const_5 ))*(NonZeroInt(-_sage_const_5 ,_sage_const_5 )*x-RandInt(-_sage_const_5 ,_sage_const_5 ))
 p2disp = expand(p2ans)
 
 #### Problem p3
 p3c1 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 p3c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 p3c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 p3ans = (p3c1*x-p3c2)*(x-p3c3)*(x+p3c3)
 p3disp = expand(p3ans)
 
 p1prompt = LatexExpr(r'\text{Factor the following polynomial. } \\ \text{Note that its leading coefficient is one, so you should use the coefficient method. }')
 
 p2prompt = LatexExpr(r'\text{Factor the following polynomial with the AC-method. }')
 p3prompt = LatexExpr(r'\text{Factor the following polynomial via grouping. }\\ \text{Remember you must factor it completely. }')
 
 problemVec = [[p1prompt,p1disp,p1ans],[p2prompt,p2disp,p2ans],[p3prompt,p3disp,p3ans]]
 shuffle(problemVec)
 
     
except:
 _st_.goboom(_sage_const_68 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_71 
 _st_.inline(_sage_const_0 , latex(problemVec[_sage_const_0 ][_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_71 )
try:
 _st_.current_tex_line = _sage_const_73 
 _st_.inline(_sage_const_1 , latex(problemVec[_sage_const_0 ][_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_73 )
try:
 _st_.current_tex_line = _sage_const_73 
 _st_.inline(_sage_const_2 , latex(problemVec[_sage_const_0 ][_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_73 )
try:
 _st_.current_tex_line = _sage_const_77 
 _st_.inline(_sage_const_3 , latex(problemVec[_sage_const_1 ][_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_77 )
try:
 _st_.current_tex_line = _sage_const_79 
 _st_.inline(_sage_const_4 , latex(problemVec[_sage_const_1 ][_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_79 )
try:
 _st_.current_tex_line = _sage_const_79 
 _st_.inline(_sage_const_5 , latex(problemVec[_sage_const_1 ][_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_79 )
try:
 _st_.current_tex_line = _sage_const_83 
 _st_.inline(_sage_const_6 , latex(problemVec[_sage_const_2 ][_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_83 )
try:
 _st_.current_tex_line = _sage_const_85 
 _st_.inline(_sage_const_7 , latex(problemVec[_sage_const_2 ][_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_85 )
try:
 _st_.current_tex_line = _sage_const_85 
 _st_.inline(_sage_const_8 , latex(problemVec[_sage_const_2 ][_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_85 )
_st_.endofdoc()

